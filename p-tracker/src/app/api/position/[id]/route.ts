import { prisma } from "../../../../../lib/prisma";
import { NextRequest, NextResponse } from "next/server";

interface PositionData {
  id?: string; // ID should be optional for creation, it's autogenerated
  name: string;
  wkn?: string;
  isin?: string;
  price?: number; // Use JavaScript's number type for Prisma's Float
  quantity?: number; // Use JavaScript's number type for Prisma's Float
  createdAt?: Date; // Use JavaScript's Date type for Prisma's DateTime
  updatedAt?: Date; // Use JavaScript's Date type for Prisma's DateTime
  ownerId?: string;
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const id = params.id;
  try {
    const position = await prisma.position.findUnique({
      where: {
        id,
      },
    });
    return NextResponse.json(position);
  } catch (error: any) {
    console.log(error);
  }
}

export async function PATCH(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const id = params.id;
    let json = (await request.json()) as PositionData;

    const updated_feedback = await prisma.position.update({
      where: { id },
      data: json,
    });

    return NextResponse.json(updated_feedback);
  } catch (error: any) {
    console.log(error);
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const id = params.id;
    await prisma.position.delete({
      where: { id },
    });

    return new NextResponse(null, { status: 204 });
  } catch (error: any) {
    console.log(error);
  }
}
